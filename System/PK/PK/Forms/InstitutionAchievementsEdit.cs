using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace PK.Forms
{
    public partial class InstitutionAchievementsEdit : Form
    {
        readonly Classes.DB_Connector _DB_Connection;
        readonly Classes.DB_Helper _DB_Helper;
        uint _LoadedCampaign;

        public InstitutionAchievementsEdit()
        {
            InitializeComponent();

            _DB_Connection = new Classes.DB_Connector();
            _DB_Helper = new Classes.DB_Helper(_DB_Connection);

            foreach (var campaign in _DB_Connection.Select(DB_Table.CAMPAIGNS, "name"))
            {
                cbCampaign.Items.Add(campaign[0]);
            }
        }

        private void UpdateTable()
        {
            dgvAchievements.Rows.Clear();
            foreach (var record in _DB_Connection.Select(DB_Table.INSTITUTION_ACHIEVEMENTS, new string[] { "id", "name", "category_dict_id",
                "category_id", "max_value" }, new List<Tuple<string, Relation, object>>
                {
                    new Tuple<string, Relation, object>("campaign_id", Relation.EQUAL, _LoadedCampaign)
                }))
            {
                dgvAchievements.Rows.Add(record[0], record[1], record[4], _DB_Helper.GetDictionaryItemName((uint)record[2], (uint)record[3]), record[3]);
            }
        }

        private void UpdateData(DB_Table table, List<object[]> oldList, List<object[]> newList, bool autoGeneratedKey, int keysCount, string[] fieldNames )
        {
            foreach (var oldItem in oldList)
            {
                if (newList.Count == 0)
                {
                    Dictionary<string, object> keyAndValues = new Dictionary<string, object>();
                    for (int i = 0; i < keysCount; i++)
                        keyAndValues.Add(fieldNames[i], oldItem[i]);

                    _DB_Connection.Delete(table, keyAndValues);
                }
                else
                {
                    bool keysMatch = true;
                    bool valuesMatch = true;
                    int index = -1;
                        do
                        {
                            index++;
                            object[] newItem = newList[index];
                            for (int i = 0; i < fieldNames.Length; i++)
                            {
                                if (i < keysCount)
                                {
                                    if ((keysMatch) && (newItem[i].ToString() != oldItem[i].ToString()))
                                        keysMatch = false;
                                }
                                else
                                    if ((valuesMatch) && (newItem[i].ToString() != oldItem[i].ToString()))
                                    valuesMatch = false;
                            }
                    
                        }
                        while ((index < newList.Count - 1) && (!((keysMatch) && (index == keysCount - 1))));

                    if (keysMatch && valuesMatch)
                    {
                        newList.RemoveAt(index);
                    }                    
                    else if (keysMatch && !valuesMatch)
                    {
                        Dictionary<string, object> columnsAndValues = new Dictionary<string, object>();
                        for (int i = keysCount; i < fieldNames.Length; i++)
                            columnsAndValues.Add(fieldNames[i], newList[index][i]);

                        Dictionary<string, object> keyAndValues = new Dictionary<string, object>();
                        for (int i = 0; i < keysCount; i++)
                            keyAndValues.Add(fieldNames[i], newList[index][i]);

                        _DB_Connection.Update(table, columnsAndValues, keyAndValues);
                        newList.RemoveAt(index);
                    }
                    else
                    {
                        Dictionary<string, object> keyAndValues = new Dictionary<string, object>();
                        for (int i = 0; i < keysCount; i++)
                            keyAndValues.Add(fieldNames[i], oldItem[i]);

                        _DB_Connection.Delete(table, keyAndValues);
                    }
                }

            }
            if (newList.Count != 0)
                foreach (var newItem in newList)
                {
                    Dictionary<string, object> columnsAndValues = new Dictionary<string, object>();
                    if (autoGeneratedKey)
                    {
                        for (int i = keysCount; i < fieldNames.Length; i++)
                            columnsAndValues.Add(fieldNames[i], newItem[i]);                        
                    }
                    else
                    {
                        for (int i = 0; i < keysCount; i++)
                            columnsAndValues.Add(fieldNames[i], newItem[i]);
                        for (int i = keysCount; i < fieldNames.Length; i++)
                            columnsAndValues.Add(fieldNames[i], newItem[i]);
                    }
                    _DB_Connection.Insert(table, columnsAndValues);
                }                
        }

        private void btSave_Click(object sender, EventArgs e)
        {
            List<object[]> oldList = new List<object[]>();
            List<object[]> newList = new List<object[]>();
            foreach (DataGridViewRow row in dgvAchievements.Rows)
                newList.Add(new object[] { row.Cells[0].Value, row.Cells[1].Value, row.Cells[2].Value, 36, row.Cells[4].Value, _LoadedCampaign });

            foreach (var record in _DB_Connection.Select(DB_Table.INSTITUTION_ACHIEVEMENTS, new string[] { "id", "name", "max_value", "category_dict_id", "category_id", "campaign_id" },
                    new List<Tuple<string, Relation, object>>
                {
                    new Tuple<string, Relation, object>("campaign_id", Relation.EQUAL, _LoadedCampaign)
                }))
                oldList.Add(new object[] { record[0], record[1], record[2], record[3], record[4], record[5] });
            UpdateData(DB_Table.INSTITUTION_ACHIEVEMENTS, oldList, newList, true, 1, new string[] { "id", "name", "max_value", "category_dict_id", "category_id", "campaign_id" });

            foreach (var institutionAchievement in _DB_Connection.Select(DB_Table.INSTITUTION_ACHIEVEMENTS, new string[] { "id", "max_value" },
                    new List<Tuple<string, Relation, object>>
                {
                    new Tuple<string, Relation, object>("campaign_id", Relation.EQUAL, _LoadedCampaign)
                }))
                foreach (var individualAchievement in _DB_Connection.Select(DB_Table.INDIVIDUAL_ACHIEVEMENTS, new string[] { "id", "mark" },
                    new List<Tuple<string, Relation, object>>
                    {
                        new Tuple<string, Relation, object>("institution_achievement_id", Relation.EQUAL, institutionAchievement[0])
                    }))
                    if (institutionAchievement[1] != individualAchievement[1])
                        _DB_Connection.Update(DB_Table.INDIVIDUAL_ACHIEVEMENTS, new Dictionary<string, object> { { "mark", institutionAchievement[1] } },
                            new Dictionary<string, object> { { "id", institutionAchievement[0] } });
        }

        private void btLoad_Click(object sender, EventArgs e)
        {
            if (cbCampaign.SelectedIndex == -1)
                MessageBox.Show("Не выбрана кампания");
            else
            {                
                foreach (var record in _DB_Helper.GetDictionaryItems(36))
                {
                    bool found = false;
                    foreach (DataGridViewRow row in dgvAchievements.Rows)
                        if (record.Key == (uint)row.Cells[4].Value)
                            found = true;
                    if (!found)
                        dgvAchievements.Rows.Add(0, record.Value, 0, record.Value, record.Key);
                }
            }
        }

        private void cbCampaign_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbCampaign.SelectedIndex != -1)
            {
                _LoadedCampaign= (uint)_DB_Connection.Select(DB_Table.CAMPAIGNS, new string[] { "id" },
                    new List<Tuple<string, Relation, object>>
                    {
                        new Tuple<string, Relation, object>("name", Relation.EQUAL, cbCampaign.SelectedItem.ToString())
                    })[0][0];
                UpdateTable();
            }
        }
    }
}
