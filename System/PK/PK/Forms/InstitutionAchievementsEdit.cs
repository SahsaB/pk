using System;
using System.Collections.Generic;
using System.Windows.Forms;
using SharedClasses.DB;

namespace PK.Forms
{
    partial class InstitutionAchievementsEdit : Form
    {
        private readonly DB_Connector _DB_Connection;
        private readonly DB_Helper _DB_Helper;

        private uint _LoadedCampaign;

        public InstitutionAchievementsEdit(DB_Connector connection)
        {
            InitializeComponent();

            _DB_Connection = connection;
            _DB_Helper = new DB_Helper(_DB_Connection);

            foreach (var campaign in _DB_Connection.Select(DB_Table.CAMPAIGNS, "name"))
            {
                cbCampaign.Items.Add(campaign[0]);
            }

            cbAchievementType.DataSource = new BindingSource(_DB_Helper.GetDictionaryItems(FIS_Dictionary.IND_ACH_CATEGORIES), null);
            cbAchievementType.DisplayMember = "Value";
            cbAchievementType.ValueMember = "Value";
        }

        private void UpdateTable()
        {
            dgvAchievements.Rows.Clear();
            foreach (var record in _DB_Connection.Select(DB_Table.INSTITUTION_ACHIEVEMENTS, new string[] { "id", "name", "category_dict_id",
                "category_id", "value" }, new List<Tuple<string, Relation, object>>
                {
                    new Tuple<string, Relation, object>("campaign_id", Relation.EQUAL, _LoadedCampaign)
                }))
            {
                dgvAchievements.Rows.Add(record[0], record[1], record[4], _DB_Helper.GetDictionaryItemName((FIS_Dictionary)record[2], (uint)record[3]), record[3]);
            }
        }

        private void UpdateData(DB_Table table, List<object[]> oldList, List<object[]> newList, bool autoGeneratedKey, int keysCount, string[] fieldNames )
        {
            using (MySql.Data.MySqlClient.MySqlTransaction transaction = _DB_Connection.BeginTransaction())
            {
                foreach (var oldItem in oldList)
            {
                if (newList.Count == 0)
                {
                    Dictionary<string, object> keyAndValues = new Dictionary<string, object>();
                    for (int i = 0; i < keysCount; i++)
                        keyAndValues.Add(fieldNames[i], oldItem[i]);

                    _DB_Connection.Delete(table, keyAndValues, transaction);
                }
                else
                {
                    bool keysMatch = true;
                    bool valuesMatch = true;
                    int index = -1;
                        do
                        {
                            index++;
                            object[] newItem = newList[index];
                            for (int i = 0; i < fieldNames.Length; i++)
                            {
                                if (i < keysCount)
                                {
                                    if ((keysMatch) && (newItem[i].ToString() != oldItem[i].ToString()))
                                        keysMatch = false;
                                }
                                else
                                    if ((valuesMatch) && (newItem[i].ToString() != oldItem[i].ToString()))
                                    valuesMatch = false;
                            }
                    
                        }
                        while ((index < newList.Count - 1) && (!((keysMatch) && (index == keysCount - 1))));

                    if (keysMatch && valuesMatch)
                    {
                        newList.RemoveAt(index);
                    }                    
                    else if (keysMatch && !valuesMatch)
                    {
                        Dictionary<string, object> columnsAndValues = new Dictionary<string, object>();
                        for (int i = keysCount; i < fieldNames.Length; i++)
                            columnsAndValues.Add(fieldNames[i], newList[index][i]);

                        Dictionary<string, object> keyAndValues = new Dictionary<string, object>();
                        for (int i = 0; i < keysCount; i++)
                            keyAndValues.Add(fieldNames[i], newList[index][i]);

                        _DB_Connection.Update(table, columnsAndValues, keyAndValues, transaction);
                        newList.RemoveAt(index);
                    }
                    else
                    {
                        Dictionary<string, object> keyAndValues = new Dictionary<string, object>();
                        for (int i = 0; i < keysCount; i++)
                            keyAndValues.Add(fieldNames[i], oldItem[i]);

                        _DB_Connection.Delete(table, keyAndValues, transaction);
                    }
                }

            }
            if (newList.Count != 0)
                foreach (var newItem in newList)
                {
                    Dictionary<string, object> columnsAndValues = new Dictionary<string, object>();
                    if (autoGeneratedKey)
                    {
                        for (int i = keysCount; i < fieldNames.Length; i++)
                            columnsAndValues.Add(fieldNames[i], newItem[i]);                        
                    }
                    else
                    {
                        for (int i = 0; i < keysCount; i++)
                            columnsAndValues.Add(fieldNames[i], newItem[i]);
                        for (int i = keysCount; i < fieldNames.Length; i++)
                            columnsAndValues.Add(fieldNames[i], newItem[i]);
                    }
                    _DB_Connection.Insert(table, columnsAndValues, transaction);
                }

                transaction.Commit();   
            }          
        }

        private void btSave_Click(object sender, EventArgs e)
        {
            List<object[]> oldList = new List<object[]>();
            List<object[]> newList = new List<object[]>();
            foreach (DataGridViewRow row in dgvAchievements.Rows)
                newList.Add(new object[] { row.Cells[0].Value, row.Cells[1].Value, row.Cells[2].Value, 36, row.Cells[4].Value, _LoadedCampaign });

            foreach (var record in _DB_Connection.Select(DB_Table.INSTITUTION_ACHIEVEMENTS, new string[] { "id", "name", "value", "category_dict_id", "category_id", "campaign_id" },
                    new List<Tuple<string, Relation, object>>
                {
                    new Tuple<string, Relation, object>("campaign_id", Relation.EQUAL, _LoadedCampaign)
                }))
                oldList.Add(new object[] { record[0], record[1], record[2], record[3], record[4], record[5] });

            UpdateData(DB_Table.INSTITUTION_ACHIEVEMENTS, oldList, newList, true, 1, new string[] { "id", "name", "value", "category_dict_id", "category_id", "campaign_id" });
        }

        private void btLoad_Click(object sender, EventArgs e)
        {
            if (cbCampaign.SelectedIndex == -1)
                MessageBox.Show("Не выбрана кампания");
            else
            {                
                foreach (var record in _DB_Helper.GetDictionaryItems(FIS_Dictionary.IND_ACH_CATEGORIES))
                {
                    bool found = false;
                    foreach (DataGridViewRow row in dgvAchievements.Rows)
                        if (record.Key == (uint)row.Cells[4].Value)
                            found = true;
                    if (!found)
                        dgvAchievements.Rows.Add(0, record.Value, 0, record.Value, record.Key);
                }
            }
        }

        private void cbCampaign_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbCampaign.SelectedIndex != -1)
            {
                _LoadedCampaign= (uint)_DB_Connection.Select(DB_Table.CAMPAIGNS, new string[] { "id" },
                    new List<Tuple<string, Relation, object>>
                    {
                        new Tuple<string, Relation, object>("name", Relation.EQUAL, cbCampaign.SelectedItem.ToString())
                    })[0][0];
                UpdateTable();
            }
        }

        private void btAdd_Click(object sender, EventArgs e)
        {
            if ((cbAchievementType.SelectedIndex == -1) || (tbAchievementName.Text == "") || (tbMaxValue.Text == ""))
                MessageBox.Show("Все поля должны быть заполнены");
            else
            {
                bool found = false;
                foreach (var record in _DB_Connection.Select(DB_Table.INSTITUTION_ACHIEVEMENTS, new string[] { "name" }, new List<Tuple<string, Relation, object>>
                {
                    new Tuple<string, Relation, object>("name", Relation.EQUAL, tbAchievementName.Text)
                }))
                {
                    MessageBox.Show("Достижение с таким наименованием уже существует");
                    found = true;
                }
                if (!found)
                    _DB_Connection.Insert(DB_Table.INSTITUTION_ACHIEVEMENTS, new Dictionary<string, object> { { "name", tbAchievementName.Text},
                        { "category_dict_id", (uint)FIS_Dictionary.IND_ACH_CATEGORIES}, { "category_id", _DB_Helper.GetDictionaryItemID(FIS_Dictionary.IND_ACH_CATEGORIES,cbAchievementType.SelectedValue.ToString())},
                        { "value", tbMaxValue.Text}, { "campaign_id", _LoadedCampaign} });
            }
            
            cbAchievementType.Enabled = false;
            tbAchievementName.Enabled = false;
            tbMaxValue.Enabled = false;
            btAdd.Enabled = false;
            label2.Enabled = false;
            label4.Enabled = false;
            label5.Enabled = false;
        }

        private void btNew_Click(object sender, EventArgs e)
        {
            if (cbCampaign.SelectedIndex == -1)
                MessageBox.Show("Выберите кампанию");
            else
            {
                cbAchievementType.Enabled = true;
                tbAchievementName.Enabled = true;
                tbMaxValue.Enabled = true;
                btAdd.Enabled = true;
                label2.Enabled = true;
                label4.Enabled = true;
                label5.Enabled = true;
            }

        }

        private void dgvAchievements_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
                if (SharedClasses.Utility.ShowChoiceMessageBox("Удалить выбранное достижение?", "Удаление достижения"))
                    return;
                else e.Handled = true;
        }
    }
}
